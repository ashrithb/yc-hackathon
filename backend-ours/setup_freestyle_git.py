#!/usr/bin/env python3
"""
Connect your PersonalizationService to Freestyle Git
"""

import subprocess
import os
from pathlib import Path

def setup_freestyle_remote():
    """Add Freestyle as a Git remote"""
    
    print("🚀 Connecting your PersonalizationService to Freestyle Git...")
    print("=" * 60)
    
    # Your Freestyle setup details
    identity_id = "49f6aada-0aa8-40c6-a564-48a314e3c14b"
    github_app_id = "1756397"
    
    print(f"👤 Using Freestyle Identity: {identity_id}")
    print(f"🔗 Using GitHub App: {github_app_id}")
    
    # Since the SDK has issues, let's use the GitHub sync approach
    # You can push to GitHub and it will sync to Freestyle
    
    print("\n📋 To connect with Freestyle Git:")
    print("1. Create a GitHub repository for your PersonalizationService")
    print("2. Connect it through your Freestyle GitHub App")
    print("3. Push to GitHub, and it syncs to Freestyle automatically")
    
    # Check if GitHub remote exists
    result = subprocess.run(
        ["git", "remote", "get-url", "origin"], 
        capture_output=True, text=True
    )
    
    if result.returncode == 0:
        print(f"\n✅ GitHub remote already configured: {result.stdout.strip()}")
        print("🔄 Your code will sync to Freestyle through GitHub")
        return True
    else:
        print("\n❌ No GitHub remote found")
        print("📝 Next steps:")
        print("   1. Create a GitHub repo: https://github.com/new")
        print("   2. Add it as remote: git remote add origin <your-repo-url>")
        print("   3. Push: git push -u origin main")
        print("   4. Freestyle will automatically sync from GitHub")
        return False

def create_freestyle_workflow():
    """Create a workflow that integrates with Freestyle"""
    
    # Enhanced commit script that mentions Freestyle
    freestyle_commit_script = """#!/bin/bash
# Commit user personalization and sync to Freestyle via GitHub

USER_ID=$1
if [ -z "$USER_ID" ]; then
    echo "Usage: ./commit_to_freestyle.sh <user_id>"
    exit 1
fi

BRANCH_NAME="user-${USER_ID}-personalized"

echo "🔄 Committing personalization for user: $USER_ID"
echo "🚀 This will sync to Freestyle via GitHub"

# Create/switch to user branch
git checkout -b "$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"

# Add changes
git add services/personalization_service.py
git add src/ 2>/dev/null || true

# Commit with timestamp
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
git commit -m "Personalization for $USER_ID - $TIMESTAMP

Generated by PersonalizationService with Claude + Morph
- User behavior analysis with Claude
- Code generation with Morph
- Synced to Freestyle Git via GitHub App (ID: 1756397)
- Freestyle Identity: 49f6aada-0aa8-40c6-a564-48a314e3c14b"

echo "✅ Committed to branch: $BRANCH_NAME"

# Push to GitHub (which syncs to Freestyle)
if git remote get-url origin >/dev/null 2>&1; then
    echo "🔄 Pushing to GitHub (syncs to Freestyle)..."
    git push origin "$BRANCH_NAME"
    echo "🎉 Pushed to GitHub! Freestyle will sync automatically."
else
    echo "⚠️  No GitHub remote configured"
    echo "   Add one to enable Freestyle sync"
fi

# Switch back to main
git checkout main

echo "🎉 User personalization versioned and synced to Freestyle!"
"""
    
    script_path = Path("commit_to_freestyle.sh")
    script_path.write_text(freestyle_commit_script)
    script_path.chmod(0o755)
    print("✅ Created commit_to_freestyle.sh (with Freestyle sync)")
    
    return True

def show_freestyle_integration():
    """Show how this integrates with Freestyle"""
    
    print(f"\n🎯 Freestyle Git Integration")
    print("=" * 40)
    
    print(f"\n✅ What you have:")
    print(f"   - PersonalizationService with Claude + Morph")
    print(f"   - Local Git with user-specific branches") 
    print(f"   - Freestyle Identity: 49f6aada-0aa8-40c6-a564-48a314e3c14b")
    print(f"   - GitHub App: Git Freestyle Sync (1756397)")
    
    print(f"\n🔄 How Freestyle Git works:")
    print(f"   1. You commit personalizations locally")
    print(f"   2. Push to GitHub repository")
    print(f"   3. Freestyle GitHub App syncs automatically")
    print(f"   4. Code is now versioned in Freestyle Git")
    print(f"   5. You can use Freestyle's Git Objects API")
    
    print(f"\n🚀 To complete Freestyle integration:")
    print(f"   1. Create GitHub repo for your PersonalizationService")
    print(f"   2. Install your GitHub App on that repo")
    print(f"   3. Add GitHub as remote and push")
    print(f"   4. Freestyle will sync and version everything")
    
    print(f"\n💡 Benefits with Freestyle:")
    print(f"   ✅ Bidirectional sync with GitHub")
    print(f"   ✅ Git Objects API for code analysis")
    print(f"   ✅ Webhook triggers for automation")
    print(f"   ✅ Identity management for access control")
    print(f"   ✅ Integration with Freestyle deployments")

def main():
    """Main setup for Freestyle Git integration"""
    
    # Set up Freestyle remote
    setup_freestyle_remote()
    
    # Create enhanced workflow scripts
    create_freestyle_workflow()
    
    # Show integration details
    show_freestyle_integration()
    
    print(f"\n🎉 Freestyle Git integration ready!")
    print(f"📝 Next: Create GitHub repo and connect it to complete the setup")

if __name__ == "__main__":
    main()
